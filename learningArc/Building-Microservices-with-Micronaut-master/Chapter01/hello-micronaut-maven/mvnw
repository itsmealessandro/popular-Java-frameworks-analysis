echo " - Compiling MavenWrapperDownloader.java ..."
                  echo " - Running MavenWrapperDownloader.java ..."
                # Compiling the Java class
                # Running the downloader
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
                ("$JAVA_HOME/bin/javac" "$javaClass")
                fi
                if [ "$MVNW_VERBOSE" = true ]; then
            fi
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
          echo "Falling back to using Java to download"
          echo "Found curl ... using curl"
          echo "Found wget ... using wget"
        curl -o "$wrapperJarPath" "$jarUrl"
        export JAVA_HOME="/Library/Java/Home"
        export JAVA_HOME="`/usr/libexec/java_home`"
        fi
        if [ "$MVNW_VERBOSE" = true ]; then
        if [ -e "$javaClass" ]; then
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
        javaExecutable="`readlink -f \"$javaExecutable\"`"
        javaHome="`dirname \"$javaExecutable\"`"
        wget "$jarUrl" -O "$wrapperJarPath"
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVA_HOME="$javaHome"
      PRG="$link"
      PRG="`dirname "$PRG"`/$link"
      basedir=$wdir
      break
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
      echo "Downloading from: $jarUrl"
      echo "Found .mvn/wrapper/maven-wrapper.jar"
      else
      esac
      export JAVA_HOME
      fi
      if $darwin ; then
      if [ -x "/usr/libexec/java_home" ]; then
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      wdir=`cd "$wdir/.."; pwd`
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # end of workaround
    # readlink(1) is not available as standard on Solaris 10.
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    . "$HOME/.mavenrc"
    . /etc/mavenrc
    ;;
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
    JAVACMD="`which java`"
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
    JAVA_HOME=`java-config --jre-home`
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
    M2_HOME=`cygpath --unix "$M2_HOME"`
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    echo "$(tr -s '\n' ' ' < "$1")"
    echo "Path not specified to find_maven_basedir"
    elif command -v curl > /dev/null; then
    else
    fi
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
    if [ -d "$wdir"/.mvn ] ; then
    if [ -d "${wdir}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
    if [ -z "$JAVA_HOME" ]; then
    if command -v wget > /dev/null; then
    if expr "$link" : '/.*' > /dev/null; then
    jarUrl="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar"
    link=`expr "$ls" : '.*-> \(.*\)$'`
    ls=`ls -ld "$PRG"`
    readLink=`which readlink`
    return 1
    while IFS="=" read key value; do
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
  "-Dmaven.home=${M2_HOME}" "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  # TODO classpath?
  # echo Using m2 at $M2_HOME
  # make it fully qualified
  # need this for relative symlinks
  ## resolve links - $0 may be a link to maven's home
  $MAVEN_OPTS \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  CYGWIN*) cygwin=true ;;
  Darwin*) darwin=true
  M2_HOME=`cd "$M2_HOME" && pwd`
  M2_HOME=`dirname "$PRG"`/..
  MINGW*) mingw=true;;
  PRG="$0"
  [ -n "$CLASSPATH" ] &&
  [ -n "$JAVA_HOME" ] &&
  [ -n "$M2_HOME" ] &&
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
  basedir="$1"
  cd "$saveddir"
  done
  echo "  We cannot execute $JAVACMD" >&2
  echo "${basedir}"
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "Warning: JAVA_HOME environment variable is not set."
  echo $MAVEN_PROJECTBASEDIR
  else
  exit 1
  exit 1;
  fi
  if [ -f "$1" ]; then
  if [ -f "$HOME/.mavenrc" ] ; then
  if [ -f /etc/mavenrc ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
  if [ -r /etc/gentoo-release ] ; then
  if [ -z "$1" ]
  javaExecutable="`which javac`"
  saveddir=`pwd`
  then
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
  while [ -h "$PRG" ] ; do
#
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#     e.g. to debug Maven itself, use
#    http://www.apache.org/licenses/LICENSE-2.0
#   JAVA_HOME - location of a JDK home dir
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# "License"); you may not use this file except in compliance
# -----------------
# ------------------
# ----------------------------------------------------------------------------
# End of extension
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# For Cygwin, ensure paths are in UNIX format before anything is touched
# For Cygwin, switch paths to Windows format before running java
# For Mingw, ensure paths are in UNIX format before anything is touched
# KIND, either express or implied.  See the License for the
# Licensed to the Apache Software Foundation (ASF) under one
# Maven2 Start Up Batch script
# OS specific support.  $var _must_ be set to either true or false.
# Optional ENV vars
# Required ENV vars:
# This allows using the maven wrapper in projects that prohibit checking in binary data.
# Unless required by applicable law or agreed to in writing,
# concatenates all lines of a file
# distributed with this work for additional information
# first directory with .mvn subdirectory is considered project base directory
# or more contributor license agreements.  See the NOTICE file
# regarding copyright ownership.  The ASF licenses this file
# software distributed under the License is distributed on an
# specific language governing permissions and limitations
# to you under the Apache License, Version 2.0 (the
# traverses directory structure from process work directory to filesystem root
# under the License.
# with the License.  You may obtain a copy of the License at
#!/bin/sh
##########################################################################################
BASE_DIR=`find_maven_basedir "$(pwd)"`
CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
case "`uname`" in
concat_lines() {
cygwin=false;
darwin=false;
else
esac
exec "$JAVACMD" \
export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
fi
find_maven_basedir() {
if $cygwin ; then
if $cygwin; then
if $mingw ; then
if [ ! -x "$JAVACMD" ] ; then
if [ "$MVNW_VERBOSE" = true ]; then
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
if [ -z "$BASE_DIR" ]; then
if [ -z "$JAVACMD" ] ; then
if [ -z "$JAVA_HOME" ] ; then
if [ -z "$JAVA_HOME" ]; then
if [ -z "$M2_HOME" ] ; then
if [ -z "$MAVEN_SKIP_RC" ] ; then
mingw=false
}